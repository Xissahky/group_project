"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ReactCloudflareTurnstile;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
function ReactCloudflareTurnstile({ turnstileSiteKey, callback, theme, size, execution, action, cData, language, tabIndex, responseField, responseFieldName, retry, retryInterval, refreshExpired, refreshTimeout, expiredCallback, errorCallback, beforeInteractiveCallback, afterInteractiveCallback, unsupportedCallback, }) {
    const turnstileRef = (0, react_1.useRef)(null);
    const [mounted, setMounted] = (0, react_1.useState)(false);
    const turnstileIdRef = (0, react_1.useRef)(undefined);
    const attemptingTurnstileRef = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        setMounted(true);
    }, []);
    (0, react_1.useEffect)(() => {
        if (!window.turnstile) {
            const script = document.createElement("script");
            script.src = `https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit`;
            script.async = true;
            document.head.appendChild(script);
            return () => {
                document.head.removeChild(script);
            };
        }
    }, []);
    const resetTheTurnstile = () => {
        var _a;
        if (!!((_a = window === null || window === void 0 ? void 0 : window.turnstile) === null || _a === void 0 ? void 0 : _a.reset) && turnstileIdRef.current) {
            window.turnstile.reset(turnstileIdRef.current);
        }
    };
    const expiredCallbackFallback = () => {
        callback("");
        resetTheTurnstile();
    };
    (0, react_1.useEffect)(() => {
        if (mounted &&
            !turnstileIdRef.current &&
            !attemptingTurnstileRef.current) {
            attemptingTurnstileRef.current = true;
            (async () => {
                while (!window.turnstile) {
                    await new Promise((resolve) => setTimeout(resolve, 10));
                }
                const renderedTurnstileId = window.turnstile.render(turnstileRef.current, {
                    sitekey: turnstileSiteKey,
                    callback,
                    theme,
                    size,
                    execution,
                    action,
                    cData,
                    language,
                    tabindex: tabIndex,
                    "response-field": responseField,
                    "response-field-name": responseFieldName,
                    retry,
                    "retry-interval": retryInterval,
                    "refresh-expired": refreshExpired,
                    "refresh-timeout": refreshTimeout,
                    "expired-callback": expiredCallback || expiredCallbackFallback,
                    "error-callback": errorCallback,
                    "before-interactive-callback": beforeInteractiveCallback,
                    "after-interactive-callback": afterInteractiveCallback,
                    "unsupported-callback": unsupportedCallback,
                });
                turnstileIdRef.current = renderedTurnstileId;
                attemptingTurnstileRef.current = false;
            })();
        }
    }, [mounted, theme, callback, size]);
    (0, react_1.useEffect)(() => {
        return () => {
            var _a;
            if (turnstileIdRef.current && ((_a = window.turnstile) === null || _a === void 0 ? void 0 : _a.remove)) {
                window.turnstile.remove(turnstileIdRef.current);
            }
        };
    }, []);
    const [height, width] = (0, react_1.useMemo)(() => {
        switch (size) {
            case "flexible":
                return ["65px", "100%"];
            case "compact":
                return ["140px", "150px"];
            case "normal":
            default:
                return ["65px", "300px"];
        }
    }, [size]);
    return ((0, jsx_runtime_1.jsx)("div", { ref: turnstileRef, className: "react-cloudflare-turnstile", style: {
            height,
            width,
        } }));
}
//# sourceMappingURL=ReactCloudflareTurnstile.js.map